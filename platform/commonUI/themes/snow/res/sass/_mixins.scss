@mixin containerSubtle($bg: $colorBodyBg, $fg: $colorBodyFg, $hover: false, $contrastRatio: 20%) {
    $hovRatio: 5%;
    $bgBase: $bg; //pullForward($bg, $contrastRatio);
    $fgBase: $fg; //pushBack($bg, $contrastRatio);

    background-color: $bgBase;
    @include border-radius($controlCr);
    @include box-sizing(border-box);
    //@include boxShdwSubtle();
    //border: none;
    //border-top: 1px solid lighten($gradC1, 2%);
    display: inline-block;
    @if $hover == true {
        &:not(.disabled):hover {
            background-color: $colorKey; //pullForward($bgBase, $hovRatio);
            //color: pushBack($fgBase, $hovRatio);
        }
    }
}

@mixin btnSubtle($bg: $colorBodyBg, $fg: $colorBodyFg, $ic: $colorBtnIcon, $contrastRatio: 20%) {
    // $ic: Icon color
    @include border-radius($controlCr);
    @include containerSubtle($bg, $fg, true, 30%);
    color: $ic;
    .icon {
        color: $ic;
    }
/*    &:not(.disabled) {
        &:not(.paused) {
            &:hover {
                .icon {
                    color: pullForward($ic, $ltGamma);
                }
            }
        }
    }*/
}

@function pullForward($c: $colorBodyBg, $p: 20%) {
    // For dark interfaces, lighter things come forward - opposite for light interfaces
    @return darken($c, $p);
}

@function pushBack($c: $colorBodyBg, $p: 20%) {
    // For dark interfaces, darker things move back - opposite for light interfaces
    @return lighten($c, $p);
}